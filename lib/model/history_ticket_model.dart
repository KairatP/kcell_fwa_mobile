class HistoryTicketModel {
  int? id;
  String ticketNumber;
  String ticketRecivedDate;
  String ticketType;
  String serviceTypeKcell;
  String regionName;
  String subareaName;
  String oblastName;
  String cityName;
  String streetName;
  String houseId;
  String streetCroseName;
  String fullAdress;
  String phoneNumber;
  String customerName;
  String lat;
  String long;
  String description;
  String creatorName;
  String networkType;
  String rSRQ;
  String rSRP;
  String rSSI;
  String sINR;
  String buisyHours;
  String buisyHoursDataSpeed;
  String networkMesureTime;
  String nameRBS;
  String sectorNmae;
  String radioProviderOwner;
  String dataSpeedMesurmenBefore;
  String dataSpeedMesurmenAfter;
  String testQualityValueBefore;
  String testQualityValueAfter;
  String customerRequestType;
  String customerComplainceType;
  String fieldEngineerComent;
  String fieldWorkAction;
  int newTicketsListId;
  HistoryTicketModel({
    this.id,
    required this.ticketNumber,
    required this.ticketRecivedDate,
    required this.ticketType,
    required this.serviceTypeKcell,
    required this.regionName,
    required this.subareaName,
    required this.oblastName,
    required this.cityName,
    required this.streetName,
    required this.houseId,
    required this.streetCroseName,
    required this.fullAdress,
    required this.phoneNumber,
    required this.customerName,
    required this.lat,
    required this.long,
    required this.description,
    required this.creatorName,
    required this.networkType,
    required this.rSRQ,
    required this.rSRP,
    required this.rSSI,
    required this.sINR,
    required this.buisyHours,
    required this.buisyHoursDataSpeed,
    required this.networkMesureTime,
    required this.nameRBS,
    required this.sectorNmae,
    required this.radioProviderOwner,
    required this.dataSpeedMesurmenBefore,
    required this.dataSpeedMesurmenAfter,
    required this.testQualityValueBefore,
    required this.testQualityValueAfter,
    required this.customerRequestType,
    required this.customerComplainceType,
    required this.fieldEngineerComent,
    required this.fieldWorkAction,
    required this.newTicketsListId,
    });

    Map<String, dynamic> toMap() {
    return {
      'id': id,
      'ticketNumber': ticketNumber,
      'ticketRecivedDate': ticketRecivedDate,
      'ticketType': ticketType,
      'serviceTypeKcell': serviceTypeKcell,
      'regionName': regionName,
      'subareaName': subareaName,
      'oblastName': oblastName,
      'cityName': cityName,
      'streetName': streetName,
      'houseId': houseId,
      'streetCroseName': streetCroseName,
      'fullAdress': fullAdress,
      'phoneNumber': phoneNumber,
      'customerName': customerName,
      'lat': lat,
      'long': long,
      'description': description,
      'creatorName': creatorName,
      'networkType': networkType,
      'rSRQ': rSRQ,
      'rSRP': rSRP,
      'rSSI': rSSI,
      'sINR': sINR,
      'buisyHours': buisyHours,
      'buisyHoursDataSpeed': buisyHoursDataSpeed,
      'networkMesureTime': networkMesureTime,
      'nameRBS': nameRBS,
      'sectorNmae': sectorNmae,
      'radioProviderOwner': radioProviderOwner,
      'dataSpeedMesurmenBefore': dataSpeedMesurmenBefore,
      'dataSpeedMesurmenAfter': dataSpeedMesurmenAfter,
      'testQualityValueBefore': testQualityValueBefore,
      'testQualityValueAfter': testQualityValueAfter,
      'customerRequestType': customerRequestType,
      'customerComplainceType': customerComplainceType,
      'fieldEngineerComent': fieldEngineerComent,
      'fieldWorkAction': fieldWorkAction,
      'newTicketsListId': newTicketsListId,
    };
  }

  factory HistoryTicketModel.fromMap(Map<String, dynamic> map) {
    return HistoryTicketModel(
      id: map['id'],
      ticketNumber: map['ticketNumber'],
      ticketRecivedDate: map['ticketRecivedDate'], 
      ticketType: map['ticketType'],
      serviceTypeKcell: map['serviceTypeKcell'],
      regionName: map['regionName'],
      subareaName: map['subareaName'],
      oblastName: map['oblastName'],
      cityName: map['cityName'],
      streetName: map['streetName'],
      houseId: map['houseId'],
      streetCroseName: map['streetCroseName'],
      fullAdress: map['fullAdress'],
      phoneNumber: map['phoneNumber'],
      customerName: map['customerName'],
      lat: map['lat'],
      long: map['long'],
      description: map['description'],
      creatorName: map['creatorName'],
      networkType: map['networkType'],
      rSRQ: map['rSRQ'],
      rSRP: map['rSRP'],
      rSSI: map['rSSI'],
      sINR: map['sINR'],
      buisyHours: map['buisyHours'],
      buisyHoursDataSpeed: map['buisyHoursDataSpeed'],
      networkMesureTime: map['networkMesureTime'],
      nameRBS: map['nameRBS'],
      sectorNmae: map['sectorNmae'],
      radioProviderOwner: map['radioProviderOwner'],
      dataSpeedMesurmenBefore: map['dataSpeedMesurmenBefore'],
      dataSpeedMesurmenAfter: map['dataSpeedMesurmenAfter'],
      testQualityValueBefore: map['testQualityValueBefore'],
      testQualityValueAfter: map['testQualityValueAfter'],
      customerRequestType: map['customerRequestType'],
      customerComplainceType: map['customerComplainceType'],
      fieldEngineerComent: map['fieldEngineerComent'],
      fieldWorkAction: map['fieldWorkAction'],
      newTicketsListId: map['newTicketsListId'],
    );
  }
}
